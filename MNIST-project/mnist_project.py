# -*- coding: utf-8 -*-
"""MNIST project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mlJNKjeLQea3cOwTS1j91nj8vSoSSdw2

## MNIST Dataset - Digit recognition

I'm using this dataset to practice my deep learning skills with Convolutional Neural Network.
"""

#importing libreries and dataset
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import tensorflow as tf
from tensorflow.keras.datasets import mnist

(X_train, Y_train), (X_test, Y_test) = mnist.load_data()

"""First we see an image and the corresponding label number"""

# Example of a picture
index = 6
plt.imshow(X_train[index])
print ("y = " + str((Y_train[index])))

"""## Normalization"""

#Normalizing data
X_train = X_train.astype("float")/255.0
X_test = X_test.astype("float")/255.0

#reshaping
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)


print ("number of training examples = " + str(X_train.shape[0]))
print ("number of test examples = " + str(X_test.shape[0]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))

"""## Build CNN"""

#import
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import History

"""### Building our model"""

model = Sequential()
model.add(Conv2D(filters = 36, kernel_size = (3,3),activation ='relu', input_shape = (28,28,1)))
model.add(MaxPool2D(pool_size=(3,3)))
model.add(Flatten()) # Flattening the 2D arrays for fully connected layers
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10,activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
history = model.fit(x=X_train,y=Y_train, epochs=10)

# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

model.summary()

model.evaluate(X_test, Y_test)

image_index = int(input('Insert number: '))
plt.imshow(X_test[image_index].reshape(28, 28),cmap='Greys')
pred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))
print('The number is = ' + str(pred.argmax()))